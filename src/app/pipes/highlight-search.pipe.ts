import { Pipe, PipeTransform } from '@angular/core';
import Fuse from 'fuse.js';
@Pipe({
    'name': 'highlight'
})

export class HighlightSearchPipe implements PipeTransform {

    transform(value: any, indexPairs: HighlightIndices): any {
        if (!indexPairs || indexPairs.length === 0) { return value; }
        let text = `${value}`;
        const MARK_LENGTH = `<mark></mark>`.length;
        let addedMarks = 0;
        indexPairs.forEach(range => {
            const start = range[0] + MARK_LENGTH * addedMarks;
            const end = range[1] + MARK_LENGTH * addedMarks;
            const highlight = text.substring(start, end + 1);
            const replacement = `<mark>${highlight}</mark>`;
            text = text.substring(0, start) + replacement + text.substring(end + 1);
            addedMarks += 1;
        });
        return text;
    }
}

export interface HighlightIndicesMap {
    [id: string]: readonly Fuse.RangeTuple[];
}
export type HighlightIndices = readonly Fuse.RangeTuple[];

/**
 * Given an array of indices (that are Fuse Range Tuples), remove all the ranges
 * that are typos. In other words, if the highlight (represented by the range tuple),
 * does not appear in the search term, remove it.
 * @param indices an array of Range Tuples that are generated by a Fuzzy Search
 * @param text the item that generates the highlight based on the indices
 * @param searchTerm a string inputed by the user
 */
export function removeIndicesThatAreTypos(
    indices: readonly Fuse.RangeTuple[],
    text: string,
    searchTerm: string): readonly Fuse.RangeTuple[] {
    const validIndices = [];
    indices.forEach(range => {
        let start = range[0];
        const end = range[1];
        const highlight = text.substring(start, end + 1).toLowerCase();
        const search = searchTerm.toLowerCase();
        const searchTermIsMissingHighlight = search.indexOf(highlight) === -1;
        const highlightIsMissingSearchTerm = highlight.indexOf(search) === -1;
        const highlightIsTypo = searchTermIsMissingHighlight && highlightIsMissingSearchTerm;
        /* Adjusting indices for inadequate fuzzy search results that
         * return highlights longer than the actual search term itself */
        if (highlight.length > search.length) {
            start = text.indexOf(search);
        }
        if (!highlightIsTypo) {
            validIndices.push([start, end]);
        }
    });
    return validIndices;
}
